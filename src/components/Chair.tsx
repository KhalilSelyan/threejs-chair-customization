/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 /models/chair.gltf -t 
*/

import * as THREE from "three";
import { useGLTF, useTexture } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { useCustomization } from "../hooks/useCustomization";

type GLTFResult = GLTF & {
  nodes: {
    Chair: THREE.Mesh;
    Cushion: THREE.Mesh;
    Legs1: THREE.Mesh;
    Legs2: THREE.Mesh;
  };
  materials: {
    Chair: THREE.MeshStandardMaterial;
    Cushion: THREE.MeshStandardMaterial;
    Legs: THREE.MeshStandardMaterial;
  };
  // animations: GLTFAction[]
};

// type ContextType = Record<string, React.ForwardRefExoticComponent<JSX.IntrinsicElements['mesh']>>

export default function Chair(props: JSX.IntrinsicElements["group"]) {
  const { nodes, materials } = useGLTF("/models/chair.gltf") as GLTFResult;

  const { material, legs, cushionColor, chairColor } = useCustomization();

  const leatherTextureProps = useTexture({
    normalMap: "/textures/leather/Leather_008_normal.jpg",
    roughnessMap: "/textures/leather/Leather_008_roughness.jpg",
    aoMap: "/textures/leather/Leather_008_ambientOcclusion.jpg",
  });

  leatherTextureProps.normalMap.repeat.set(3, 3);
  leatherTextureProps.roughnessMap.repeat.set(3, 3);
  leatherTextureProps.aoMap.repeat.set(3, 3);

  leatherTextureProps.normalMap.wrapS =
    leatherTextureProps.normalMap.wrapT =
    leatherTextureProps.roughnessMap.wrapS =
    leatherTextureProps.roughnessMap.wrapT =
    leatherTextureProps.aoMap.wrapS =
    leatherTextureProps.aoMap.wrapT =
      THREE.RepeatWrapping;

  const fabricTextureProps = useTexture({
    normalMap: "/textures/fabric/Fabric_Lace_012_normal.jpg",
    roughnessMap: "/textures/fabric/Fabric_Lace_012_roughness.jpg",
    aoMap: "/textures/fabric/Fabric_Lace_012_ambientOcclusion.jpg",
  });

  fabricTextureProps.normalMap.repeat.set(3, 3);
  fabricTextureProps.roughnessMap.repeat.set(3, 3);
  fabricTextureProps.aoMap.repeat.set(3, 3);

  fabricTextureProps.normalMap.wrapS =
    fabricTextureProps.normalMap.wrapT =
    fabricTextureProps.roughnessMap.wrapS =
    fabricTextureProps.roughnessMap.wrapT =
    fabricTextureProps.aoMap.wrapS =
    fabricTextureProps.aoMap.wrapT =
      THREE.RepeatWrapping;

  return (
    <group {...props} dispose={null}>
      <mesh geometry={nodes.Chair.geometry}>
        <meshStandardMaterial
          {...(material === "leather"
            ? leatherTextureProps
            : fabricTextureProps)}
          color={chairColor}
        />
      </mesh>
      <mesh geometry={nodes.Cushion.geometry} position={[0, 0.064, 0.045]}>
        <meshStandardMaterial
          {...(material === "fabric"
            ? leatherTextureProps
            : fabricTextureProps)}
          // {...fabricTextureProps}
          color={cushionColor}
        />
      </mesh>
      <mesh
        geometry={
          legs === "modern" ? nodes.Legs1.geometry : nodes.Legs2.geometry
        }
        material={materials.Legs}
      />
    </group>
  );
}

useGLTF.preload("/chair.gltf");
